package cn.zju.zuochengyun;

/**
 * 卡特兰数，又称卡塔兰数，是组合数学中一种常出现于各种计数问题中的数列。
 * 其前几项为：
 * 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190。。。
 * 设h(n)为catalan数的第n项，令h(0)=1,h(1)=1，catalan数满足递推式 （1）：
 * h(n)= h(0)*h(n-1) + h(1)*h(n-2) + ... + h(n-1)*h(0) (n≥2)
 * 例如：h(2)=h(0)*h(1)+h(1)*h(0)=1*1+1*1=2
 * h(3)=h(0)*h(2)+h(1)*h(1)+h(2)*h(0)=1*2+1*1+2*1=5
 * 另类递推式（2）：
 * h(n)=h(n-1)*(4 * n-2)/(n+1)
 * h(n+1)=h(n) * (4 * n + 2) / (n + 2)
 * 递推关系的解为（3）：
 * h(n)=C(2n,n)/(n+1) (n=0,1,2,...)
 * 递推关系的另类解为（4）：
 * h(n)=C(2n,n) - C(2n,n-1) (n=0,1,2,...)
 *
 * 递推表达式（1）和（4）比较常用 重点就是k(n) = C(2n,n) - C(2n,n-1)
 */

/**
 * 可以应用在：
 * （1）二叉树给定节点个数，有多少种二叉树表现形式，范式1
 * （2）定义满足条件的数字为：任意前缀中1的数目不超过0，给定N个0 和 N个1,，问有几种符合条件的数字
 * （3）给定N个数字，问有多少种入栈或者说是出栈的次序
 * （4）案例（2）的变种可以适用于许多排列受限制的题目类型
 * 例如：给定偶数个人排成两列（给每个人编号），第二列与第一列对应位置的人的编号一定要大于第一列对应位置的编号
 * 即arr1[i] < arr2[2] 问有几种合理的排列方式
 */
public class CatanlanNumber {
    public static void main(String[] args) {
        long sum1 = 1;
        for (long i = 11; i <= 20; i++) {
            sum1 *= i;
        }
        long div1 = 1;
        for (long i = 1; i <= 10; i++) {
            div1 *= i;
        }
        long sum2 = 1;
        for (long i = 10; i <= 20; i++) {
            sum2 *= i;
        }
        long div2 = 1;
        for (long i = 1; i <= 11; i++) {
            div2 *= i;
        }
        System.out.println(sum1 / div1 - sum2 / div2);
        System.out.println(sum1 / (div1 * 11));
    }
}
